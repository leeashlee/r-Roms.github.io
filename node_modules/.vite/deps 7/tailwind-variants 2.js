import {
  extendTailwindMerge,
  twMerge
} from "./chunk-BTNRXTUH.js";
import "./chunk-G3PMV62Z.js";

// node_modules/tailwind-variants/dist/chunk-LK3VBVBE.js
var u = (e) => e === false ? "false" : e === true ? "true" : e === 0 ? "0" : e;
var a = (e) => {
  if (!e || typeof e != "object") return true;
  for (let r in e) return false;
  return true;
};
var y = (e, r) => {
  if (e === r) return true;
  if (!e || !r) return false;
  let n = Object.keys(e), t = Object.keys(r);
  if (n.length !== t.length) return false;
  for (let s = 0; s < n.length; s++) {
    let f = n[s];
    if (!t.includes(f) || e[f] !== r[f]) return false;
  }
  return true;
};
function o(e, r) {
  for (let n = 0; n < e.length; n++) {
    let t = e[n];
    Array.isArray(t) ? o(t, r) : r.push(t);
  }
}
var i = (...e) => {
  let r = [];
  o(e, r);
  let n = [];
  for (let t = 0; t < r.length; t++) r[t] && n.push(r[t]);
  return n;
};
var c = (e, r) => {
  let n = {};
  for (let t in e) {
    let s = e[t];
    if (t in r) {
      let f = r[t];
      Array.isArray(s) || Array.isArray(f) ? n[t] = i(f, s) : typeof s == "object" && typeof f == "object" && s && f ? n[t] = c(s, f) : n[t] = f + " " + s;
    } else n[t] = s;
  }
  for (let t in r) t in e || (n[t] = r[t]);
  return n;
};
var l = /\s+/g;
var x = (e) => !e || typeof e != "string" ? e : e.replace(l, " ").trim();

// node_modules/tailwind-variants/dist/chunk-RFCF2RNL.js
var p = (s) => a(s) ? twMerge : extendTailwindMerge({ ...s, extend: { theme: s.theme, classGroups: s.classGroups, conflictingClassGroupModifiers: s.conflictingClassGroupModifiers, conflictingClassGroups: s.conflictingClassGroups, ...s.extend } });

// node_modules/tailwind-variants/dist/index.js
var st = { twMerge: true, twMergeConfig: {}, responsiveVariants: false };
var x2 = (...l2) => {
  let u2 = [];
  X(l2, u2);
  let t = "";
  for (let d = 0; d < u2.length; d++) u2[d] && (t && (t += " "), t += u2[d]);
  return t || void 0;
};
function X(l2, u2) {
  for (let t = 0; t < l2.length; t++) {
    let d = l2[t];
    Array.isArray(d) ? X(d, u2) : d && u2.push(d);
  }
}
var P = null;
var B = {};
var F = false;
var S = (...l2) => (u2) => {
  let t = x2(l2);
  return !t || !u2.twMerge ? t : ((!P || F) && (F = false, P = p(B)), P(t) || void 0);
};
var Q = (l2, u2) => {
  for (let t in u2) t in l2 ? l2[t] = x2(l2[t], u2[t]) : l2[t] = u2[t];
  return l2;
};
var rt = (l2, u2) => {
  let { extend: t = null, slots: d = {}, variants: R = {}, compoundVariants: q = [], compoundSlots: A = [], defaultVariants: L = {} } = l2, m = { ...st, ...u2 }, M = t?.base ? x2(t.base, l2?.base) : l2?.base, y2 = t?.variants && !a(t.variants) ? c(R, t.variants) : R, T = t?.defaultVariants && !a(t.defaultVariants) ? { ...t.defaultVariants, ...L } : L;
  !a(m.twMergeConfig) && !y(m.twMergeConfig, B) && (F = true, B = m.twMergeConfig);
  let j = a(t?.slots), $ = a(d) ? {} : { base: x2(l2?.base, j && t?.base), ...d }, N = j ? $ : Q({ ...t?.slots }, a($) ? { base: l2?.base } : $), w = a(t?.compoundVariants) ? q : i(t?.compoundVariants, q), V = (b$1) => {
    if (a(y2) && a(d) && j) return S(M, b$1?.class, b$1?.className)(m);
    if (w && !Array.isArray(w)) throw new TypeError(`The "compoundVariants" prop must be an array. Received: ${typeof w}`);
    if (A && !Array.isArray(A)) throw new TypeError(`The "compoundSlots" prop must be an array. Received: ${typeof A}`);
    let Z = (n, e, s = [], o2) => {
      let a2 = s;
      if (typeof e == "string") {
        let c2 = x(e).split(" ");
        for (let f = 0; f < c2.length; f++) a2.push(`${n}:${c2[f]}`);
      } else if (Array.isArray(e)) for (let r = 0; r < e.length; r++) a2.push(`${n}:${e[r]}`);
      else if (typeof e == "object" && typeof o2 == "string" && o2 in e) {
        let r = e[o2];
        if (r && typeof r == "string") {
          let f = x(r).split(" "), p2 = [];
          for (let i2 = 0; i2 < f.length; i2++) p2.push(`${n}:${f[i2]}`);
          a2[o2] = a2[o2] ? a2[o2].concat(p2) : p2;
        } else if (Array.isArray(r) && r.length > 0) {
          let c2 = [];
          for (let f = 0; f < r.length; f++) c2.push(`${n}:${r[f]}`);
          a2[o2] = c2;
        }
      }
      return a2;
    }, U = (n, e = y2, s = null, o2 = null) => {
      let a2 = e[n];
      if (!a2 || a(a2)) return null;
      let r = o2?.[n] ?? b$1?.[n];
      if (r === null) return null;
      let c2 = u(r), f = Array.isArray(m.responsiveVariants) && m.responsiveVariants.length > 0 || m.responsiveVariants === true, p2 = T?.[n], i2 = [];
      if (typeof c2 == "object" && f) for (let [C, G] of Object.entries(c2)) {
        let nt = a2[G];
        if (C === "initial") {
          p2 = G;
          continue;
        }
        Array.isArray(m.responsiveVariants) && !m.responsiveVariants.includes(C) || (i2 = Z(C, nt, i2, s));
      }
      let v = c2 != null && typeof c2 != "object" ? c2 : u(p2), h = a2[v || "false"];
      return typeof i2 == "object" && typeof s == "string" && i2[s] ? Q(i2, h) : i2.length > 0 ? (i2.push(h), s === "base" ? i2.join(" ") : i2) : h;
    }, _ = () => {
      if (!y2) return null;
      let n = Object.keys(y2), e = [];
      for (let s = 0; s < n.length; s++) {
        let o2 = U(n[s], y2);
        o2 && e.push(o2);
      }
      return e;
    }, K = (n, e) => {
      if (!y2 || typeof y2 != "object") return null;
      let s = [];
      for (let o2 in y2) {
        let a2 = U(o2, y2, n, e), r = n === "base" && typeof a2 == "string" ? a2 : a2 && a2[n];
        r && s.push(r);
      }
      return s;
    }, W = {};
    for (let n in b$1) {
      let e = b$1[n];
      e !== void 0 && (W[n] = e);
    }
    let z = (n, e) => {
      let s = typeof b$1?.[n] == "object" ? { [n]: b$1[n]?.initial } : {};
      return { ...T, ...W, ...s, ...e };
    }, D = (n = [], e) => {
      let s = [], o2 = n.length;
      for (let a2 = 0; a2 < o2; a2++) {
        let { class: r, className: c2, ...f } = n[a2], p2 = true, i2 = z(null, e);
        for (let v in f) {
          let h = f[v], C = i2[v];
          if (Array.isArray(h)) {
            if (!h.includes(C)) {
              p2 = false;
              break;
            }
          } else {
            if ((h == null || h === false) && (C == null || C === false)) continue;
            if (C !== h) {
              p2 = false;
              break;
            }
          }
        }
        p2 && (r && s.push(r), c2 && s.push(c2));
      }
      return s;
    }, tt = (n) => {
      let e = D(w, n);
      if (!Array.isArray(e)) return e;
      let s = {}, o2 = S;
      for (let a2 = 0; a2 < e.length; a2++) {
        let r = e[a2];
        if (typeof r == "string") s.base = o2(s.base, r)(m);
        else if (typeof r == "object") for (let c2 in r) s[c2] = o2(s[c2], r[c2])(m);
      }
      return s;
    }, et = (n) => {
      if (A.length < 1) return null;
      let e = {}, s = z(null, n);
      for (let o2 = 0; o2 < A.length; o2++) {
        let { slots: a2 = [], class: r, className: c2, ...f } = A[o2];
        if (!a(f)) {
          let p2 = true;
          for (let i2 in f) {
            let v = s[i2], h = f[i2];
            if (v === void 0 || (Array.isArray(h) ? !h.includes(v) : h !== v)) {
              p2 = false;
              break;
            }
          }
          if (!p2) continue;
        }
        for (let p2 = 0; p2 < a2.length; p2++) {
          let i2 = a2[p2];
          e[i2] || (e[i2] = []), e[i2].push([r, c2]);
        }
      }
      return e;
    };
    if (!a(d) || !j) {
      let n = {};
      if (typeof N == "object" && !a(N)) {
        let e = S;
        for (let s in N) n[s] = (o2) => {
          let a2 = tt(o2), r = et(o2);
          return e(N[s], K(s, o2), a2 ? a2[s] : void 0, r ? r[s] : void 0, o2?.class, o2?.className)(m);
        };
      }
      return n;
    }
    return S(M, _(), D(w), b$1?.class, b$1?.className)(m);
  }, Y = () => {
    if (!(!y2 || typeof y2 != "object")) return Object.keys(y2);
  };
  return V.variantKeys = Y(), V.extend = t, V.base = M, V.slots = N, V.variants = y2, V.defaultVariants = T, V.compoundSlots = A, V.compoundVariants = w, V;
};
var it = (l2) => (u2, t) => rt(u2, t ? c(l2, t) : l2);
export {
  S as cn,
  x2 as cnBase,
  it as createTV,
  st as defaultConfig,
  rt as tv
};
//# sourceMappingURL=tailwind-variants.js.map
